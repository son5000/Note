하이브리드(Hybrid) 렌더링
Hybrid: 혼합

특정 목적을 달성하기 위해 두개 이상의 기능이나 요소를 결합

Next.js 는 Hybrid Web App 이라고도 불리우는데, 성능 좋은 강력한 Web App 을 만들기 위해 두개 이상의 렌더링 방법을 사용하는것을 의미한다.

예를 들어

홈페이지는 ISR로
about 페이지는 잘 변경되지 않기 때문에 SSG로
사용자의 profile페이지는 CSR/SSR을 하이브리드해서 만들 수 있다.

이처럼 한 애플리케이션에서 페이지의 특성에 따라 적절한 렌더링 방식을 체택해 만들 수 있고
심지어는 하나의 페이지 내에서도 하이브리드가 가능하다.

이렇게 처리하면 좋은점이 서버에서 HTML을 생성해서 내려주면 SEO에 유리하고, 서버에서 빠르게 HTML을 응답해줄수 있다. 그리고 CSR 로 처리되는 컴포넌트에 대한 JS만 다운이 이루어져서 동작하면 되기때문에 사용자는 좀 더 빠르게 애플리케이션 이용이 가능해진다.

하이드레이션(Hydration)
수화시키다: 물로 가득 채우다, 물과 섞다

→ 물을 리액트로 생각하자.

서버에서 사용자에게 응답해주는 HTML에 React로 채운다.

정적인 HTML을 받으면, JS가 연결이 되어있지 않기때문에 이벤트 및 인터렉션이 동작하지 않음

이후에 React 및 JS를 응답받아서 로딩이 되면 정적인 HTML에 React를 가득 채운다.

→ React 컴포넌트로 렌더링이 발생

잘못 만들어진 Next.js 라던가 옛날버전 사용해보면 페이지 깜빡임이 발생을 하는데 해당 깜빡임이 리액트 컴포넌트 렌더링때문에 발생하는거임

Next.js 는 서버에서 컴포넌트를 읽어 HTML을 생성하고, 이를 클라이언트에 응답한다.
클라이언트는 말그대로, 정적인 HTML을 전달받은거다. 여기에 React 로 작성한 자바스크립트 코드와 연결을 해줘야하는데 번들링된 JS도 같이 내려받는다.
클라이언트는 전달받은 HTML을 hydrateRoot() 를 호출하여 렌더링된 HTML에 자바스크립트 코드를 연결시켜준다(React 로 채워주기)
hydration 할 html과 react 렌더 트리의 불일치가 발생하면, hydration mismatch 에러를 발생 시킵니다. 수정이 되는경우 깜빡임이 발생하면서 UI가 업데이트가 이루어집니다만.. 공식문서에서는 반드시 고쳐야 하는 오류로 보고 이를 없애라고 권장하고 있습니다.
